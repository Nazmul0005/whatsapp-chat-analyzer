import streamlit as st
import zipfile
import re
from pathlib import Path
import tempfile

def is_bangla_text(text):
    """
    Check if the text contains Bangla characters.
    Bangla Unicode range: \u0980-\u09FF
    """
    if not text or len(text.strip()) == 0:
        return False
    
    # Skip system messages
    system_keywords = [
        'Messages and calls are end-to-end encrypted',
        'created group',
        'were added',
        'left',
        'changed',
        '<Media omitted>',
        'Waiting for this message',
        'This message was deleted',
        'changed to'
    ]
    
    for keyword in system_keywords:
        if keyword.lower() in text.lower():
            return False
    
    bangla_chars = 0
    total_chars = 0
    
    for char in text:
        if char.strip() and not char.isspace() and char not in '.,!?;:@#$%^&*()[]{}+-=/\\|<>~`"\'':
            total_chars += 1
            if '\u0980' <= char <= '\u09FF':
                bangla_chars += 1
    
    if total_chars == 0:
        return False
    
    # Consider it Bangla if at least 25% of characters are Bangla
    return (bangla_chars / total_chars) >= 0.25

def extract_zip_file(zip_file):
    """Extract zip file and return the path to the .txt file."""
    with tempfile.TemporaryDirectory() as temp_dir:
        with zipfile.ZipFile(zip_file, 'r') as zip_ref:
            zip_ref.extractall(temp_dir)
        
        # Find the .txt file
        txt_files = list(Path(temp_dir).rglob('*.txt'))
        
        if txt_files:
            with open(txt_files[0], 'r', encoding='utf-8') as f:
                return f.read()
        else:
            return None

def parse_whatsapp_chat(chat_text):
    """
    Parse WhatsApp chat text and extract messages.
    Format: DD/MM/YYYY, HH:MM am/pm - +880 XXXX-XXXXXX: Message
    """
    messages = []
    lines = chat_text.split('\n')
    
    # Pattern for WhatsApp message with phone number
    # Matches: DD/MM/YYYY, HH:MM am/pm - +880 XXXX-XXXXXX: Message
    pattern = r'^(\d{1,2}/\d{1,2}/\d{4}),\s+(\d{1,2}:\d{2}\s*(?:am|pm))\s*-\s*([^:]+):\s*(.*)$'
    
    current_msg = None
    
    for line in lines:
        match = re.match(pattern, line, re.IGNORECASE)
        
        if match:
            # Save previous message if exists
            if current_msg:
                messages.append(current_msg)
            
            # Start new message
            date = match.group(1)
            time = match.group(2)
            sender = match.group(3).strip()
            message = match.group(4).strip()
            
            current_msg = {
                'date': date,
                'time': time,
                'sender': sender,
                'message': message
            }
        elif current_msg and line.strip():
            # Continuation of previous message
            current_msg['message'] += '\n' + line.strip()
    
    # Add last message
    if current_msg:
        messages.append(current_msg)
    
    return messages

def filter_bangla_messages(messages):
    """Filter messages that contain Bangla text."""
    bangla_messages = []
    
    for msg in messages:
        if is_bangla_text(msg['message']):
            bangla_messages.append(msg)
    
    return bangla_messages

def format_phone_number(sender):
    """Format phone number for better display."""
    # If it's a phone number, format it nicely
    if sender.startswith('+880'):
        return sender
    return sender

# Streamlit App
st.set_page_config(
    page_title="WhatsApp Bangla Message Extractor",
    page_icon="üí¨",
    layout="wide"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .message-card {
        background-color: #f0f2f6;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
        border-left: 4px solid #4CAF50;
    }
    .sender-info {
        color: #1f77b4;
        font-weight: bold;
        margin-bottom: 5px;
    }
    .date-time {
        color: #666;
        font-size: 0.85em;
        margin-bottom: 10px;
    }
    .message-text {
        font-size: 1.1em;
        line-height: 1.6;
        color: #333;
    }
    .copy-button {
        background-color: #4CAF50;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 0.9em;
    }
</style>
""", unsafe_allow_html=True)

st.title("üí¨ WhatsApp ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ Message Extractor")
st.markdown("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ WhatsApp ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü (ZIP ‡¶´‡¶æ‡¶á‡¶≤) ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶∏‡¶¨ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡ßÅ‡¶®‡•§")

# File uploader
uploaded_file = st.file_uploader(
    "‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ WhatsApp ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ZIP ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶°‡ßç‡¶∞‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®",
    type=['zip'],
    help="WhatsApp ‡¶•‡ßá‡¶ï‡ßá 'Export Chat' ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ZIP ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®"
)

if uploaded_file is not None:
    with st.spinner("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá..."):
        # Extract the zip file
        chat_text = extract_zip_file(uploaded_file)
        
        if chat_text is None:
            st.error("‚ùå ZIP ‡¶Ü‡¶∞‡ßç‡¶ï‡¶æ‡¶á‡¶≠‡ßá ‡¶ï‡ßã‡¶® .txt ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï‡¶≠‡¶æ‡¶¨‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶® ‡¶ï‡¶ø‡¶®‡¶æ ‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        else:
            # Parse the chat
            all_messages = parse_whatsapp_chat(chat_text)
            
            # Filter Bangla messages
            bangla_messages = filter_bangla_messages(all_messages)
            
            # Display statistics
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú", len(all_messages))
            with col2:
                st.metric("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú", len(bangla_messages))
            with col3:
                percentage = (len(bangla_messages)/len(all_messages)*100) if all_messages else 0
                st.metric("‡¶™‡¶æ‡¶∞‡ßç‡¶∏‡ßá‡¶®‡ßç‡¶ü‡ßá‡¶ú", f"{percentage:.1f}%")
            
            st.markdown("---")
            
            if bangla_messages:
                st.subheader(f"üìù {len(bangla_messages)} ‡¶ü‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá")
                
                # Search functionality
                search_term = st.text_input("üîç ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßÅ‡¶®", placeholder="‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ï‡¶∞‡¶§‡ßá ‡¶ü‡¶æ‡¶á‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®...")
                
                # Filter by sender
                all_senders = sorted(list(set([msg['sender'] for msg in bangla_messages])))
                selected_sender = st.selectbox("‡¶™‡¶æ‡¶†‡¶æ‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®", ["‡¶∏‡¶¨‡¶æ‡¶á"] + all_senders)
                
                # Apply filters
                filtered_messages = bangla_messages
                if search_term:
                    filtered_messages = [msg for msg in filtered_messages if search_term.lower() in msg['message'].lower()]
                if selected_sender != "‡¶∏‡¶¨‡¶æ‡¶á":
                    filtered_messages = [msg for msg in filtered_messages if msg['sender'] == selected_sender]
                
                st.info(f"üìä {len(filtered_messages)} ‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá")
                
                # Display messages in a beautiful format
                for idx, msg in enumerate(filtered_messages, 1):
                    with st.container():
                        # Header with number and sender
                        col1, col2 = st.columns([5, 1])
                        with col1:
                            st.markdown(f"### {idx}. üë§ {format_phone_number(msg['sender'])}")
                        with col2:
                            st.markdown(f"<div style='text-align: right; color: #666; font-size: 0.9em;'>üìÖ {msg['date']}<br>üïê {msg['time']}</div>", unsafe_allow_html=True)
                        
                        # Message content in a text area (easy to copy)
                        st.text_area(
                            label=f"‡¶Æ‡ßá‡¶∏‡ßá‡¶ú {idx}",
                            value=msg['message'],
                            height=max(100, len(msg['message'].split('\n')) * 30),
                            key=f"msg_{idx}",
                            label_visibility="collapsed"
                        )
                        
                        st.markdown("---")
                
                # Download option
                st.markdown("### üíæ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶Ö‡¶™‡¶∂‡¶®")
                
                # Prepare text for download
                download_text = "=" * 80 + "\n"
                download_text += "‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π\n"
                download_text += f"‡¶Æ‡ßã‡¶ü ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: {len(filtered_messages)}\n"
                download_text += "=" * 80 + "\n\n"
                
                for idx, msg in enumerate(filtered_messages, 1):
                    download_text += f"{idx}. ‡¶™‡¶æ‡¶†‡¶æ‡¶ï‡¶æ‡¶∞‡ßÄ: {msg['sender']}\n"
                    download_text += f"   ‡¶§‡¶æ‡¶∞‡¶ø‡¶ñ: {msg['date']} {msg['time']}\n"
                    download_text += f"   ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú: {msg['message']}\n"
                    download_text += "\n" + "-" * 80 + "\n\n"
                
                col1, col2 = st.columns(2)
                with col1:
                    st.download_button(
                        label="üì• ‡¶∏‡¶¨ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú TXT ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®",
                        data=download_text,
                        file_name="bangla_messages.txt",
                        mime="text/plain",
                        use_container_width=True
                    )
                
                with col2:
                    # Prepare simple format (only messages)
                    simple_text = "\n\n".join([msg['message'] for msg in filtered_messages])
                    st.download_button(
                        label="üìÑ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶® (‡¶∏‡¶ø‡¶Æ‡ßç‡¶™‡¶≤ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü)",
                        data=simple_text,
                        file_name="bangla_messages_simple.txt",
                        mime="text/plain",
                        use_container_width=True
                    )
                
            else:
                st.warning("‚ö†Ô∏è ‡¶è‡¶á ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶ï‡ßã‡¶® ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§")
                st.info("‡¶®‡¶ø‡¶∂‡ßç‡¶ö‡¶ø‡¶§ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶Ø‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶õ‡ßá‡•§")

else:
    # Instructions
    st.info("üëÜ ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ WhatsApp ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ZIP ‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®")
    
    with st.expander("üìñ ‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá WhatsApp ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶¨‡ßá‡¶®?"):
        st.markdown("""
        **Android/iPhone:**
        1. WhatsApp ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®
        2. ‡¶Ø‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶¨‡¶æ ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶è‡¶ï‡ßç‡¶∏‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶∏‡ßá‡¶ü‡¶ø ‡¶ñ‡ßÅ‡¶≤‡ßÅ‡¶®
        3. ‡¶â‡¶™‡¶∞‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™/‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶∞ ‡¶®‡¶æ‡¶Æ‡ßá ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
        4. ‡¶®‡¶ø‡¶ö‡ßá ‡¶∏‡ßç‡¶ï‡ßç‡¶∞‡¶≤ ‡¶ï‡¶∞‡ßá **"Export Chat"** ‡¶è ‡¶ü‡ßç‡¶Ø‡¶æ‡¶™ ‡¶ï‡¶∞‡ßÅ‡¶®
        5. **"Without Media"** ‡¶¨‡¶æ **"Include Media"** ‡¶∏‡¶ø‡¶≤‡ßá‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
        6. ZIP ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶∏‡ßá‡¶≠ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
        """)
    
    with st.expander("‚ÑπÔ∏è ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßÇ‡¶π"):
        st.markdown("""
        - ‚úÖ ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ZIP ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶ï‡ßç‡¶∏‡¶ü‡ßç‡¶∞‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶ü ‡¶ï‡¶∞‡ßá
        - ‚úÖ NLP ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡ßá
        - ‚úÖ ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶ï‡¶æ‡¶∞‡ßç‡¶°-‡¶≠‡¶ø‡¶§‡ßç‡¶§‡¶ø‡¶ï ‡¶°‡¶ø‡¶∏‡¶™‡ßç‡¶≤‡ßá
        - ‚úÖ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø
        - ‚úÖ ‡¶™‡¶æ‡¶†‡¶æ‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ ‡¶´‡¶ø‡¶≤‡ßç‡¶ü‡¶æ‡¶∞
        - ‚úÖ ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶™‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®
        - ‚úÖ ‡¶∏‡¶¨ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú TXT ‡¶´‡¶æ‡¶á‡¶≤‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßÅ‡¶®
        - ‚úÖ ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßá‡¶ü‡ßç‡¶∞‡¶ø‡¶ï‡ßç‡¶∏ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º
        - ‚úÖ ‡¶∏‡¶ø‡¶∏‡ßç‡¶ü‡ßá‡¶Æ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶Ø‡¶º
        - ‚úÖ ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü
        """)
    
    with st.expander("üéØ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£"):
        st.markdown("""
        ‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶™‡¶ü‡¶ø ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶ß‡¶∞‡¶®‡ßá‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∂‡¶®‡¶æ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá:
        
        - "‡¶∂‡ßÅ‡¶≠ ‡¶®‡¶¨‡¶¨‡¶∞‡ßç‡¶∑ ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá" ‚úÖ
        - "‡¶ß‡¶∞‡ßç‡¶Æ‡¶ï‡ßá ‡¶ß‡¶∞‡ßç‡¶Æ‡ßá‡¶∞ ‡¶∏‡ßç‡¶•‡¶æ‡¶®‡ßá ‡¶∞‡ßá‡¶ñ‡ßá ‡¶∏‡¶ï‡¶≤ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡¶ï‡ßá ‡¶≠‡¶æ‡¶≤‡¶¨‡¶æ‡¶∏‡¶ø‡•§" ‚úÖ
        - "‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá ‡¶®‡¶¨‡¶¨‡¶∞‡ßç‡¶∑ ‡¶ì ‡¶™‡¶æ‡¶π‡¶æ‡¶°‡¶º ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßà‡¶∏‡¶æ‡¶¨‡¶ø‡¶∞ ‡¶∂‡ßÅ‡¶≠‡ßá‡¶ö‡ßç‡¶õ‡¶æ" ‚úÖ
        - "‡¶è‡¶§‡ßã ‡¶∞‡¶æ‡¶§‡ßá ‡¶®‡¶ï ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡¶∞‡¶ø ‡¶∏‡¶¨‡¶æ‡¶á‡¶ï‡ßá..." ‚úÖ
        
        ‡¶è‡¶°‡¶º‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá:
        - "<Media omitted>" ‚ùå
        - "Waiting for this message" ‚ùå
        - "Messages and calls are end-to-end encrypted" ‚ùå
        """)

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: gray;'>‚ù§Ô∏è Streamlit ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶§‡ßà‡¶∞‡¶ø | ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶ï‡ßá ‡¶≠‡¶æ‡¶≤‡ßã‡¶¨‡¶æ‡¶∏‡¶ø</div>",
    unsafe_allow_html=True
)